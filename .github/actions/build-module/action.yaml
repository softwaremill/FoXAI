name: Build Python Module
description: Builds Python module and runs required checks
inputs:
  moduleName:
    required: true
    description: |
      The name of the module to be build.
      Does not include the full path, only the name.
  moduleFolder:
    required: true
    description: |
      The folder where the module resides. Uses empty string for root modules or the path
      from the root folder to the module folder otherwise.
    default: ""
runs:
  using: composite
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      env:
          PIP_ROOT_USER_ACTION: 'ignore'
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Upgrade pip
      shell: bash
      run: |
        pip install --root-user-action=ignore --upgrade pip 
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: "${{ inputs.moduleFolder }}/.venv"
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}--${{ hashFiles('poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('poetry.lock') }}
          venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
    
    - name: Setup poetry
      uses: abatilo/actions-poetry@v2.3.0
      env:
          PIP_ROOT_USER_ACTION: ignore
      with:
        poetry-version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      shell: bash
      env:
          PIP_ROOT_USER_ACTION: ignore
      run: |
        poetry install 
    
    - name: Install pandas (version ${{ env.PANDAS_VERSION }})
      shell: bash
      env:
          PIP_ROOT_USER_ACTION: ignore
      run: |
        poetry run pip uninstall pandas --yes 
        poetry run pip install pandas==${{ env.PANDAS_VERSION }}
    
    - name: Install torch (version ${{ env.TORCH_VERSION }})
      shell: bash
      env:
          PIP_ROOT_USER_ACTION: ignore
      run: |
        poetry run pip uninstall torch --yes
        poetry run pip install torch==${{ env.TORCH_VERSION }}

    - name: Install pytorch-lightning (version ${{ env.PYTORCH_LIGHTNING_VERSION }})
      shell: bash
      env:
          PIP_ROOT_USER_ACTION: ignore
      run: |
        poetry run pip uninstall pytorch-lightning --yes --root-user-action ignore
        poetry run pip install pytorch-lightning==${{ env.PYTORCH_LIGHTNING_VERSION }}
      working-directory: "${{ inputs.moduleFolder }}"

    - name: Run Black
      shell: bash
      run: |
        poetry run black . --check --diff --color
      working-directory: "${{ inputs.moduleFolder }}"

    - name: Run MyPy checks
      shell: bash
      run: |
        poetry run mypy -p foxai --show-error-context --pretty --namespace-packages --explicit-package-bases --ignore-missing-imports
      working-directory: "${{ inputs.moduleFolder }}"

    - name: Run tests
      shell: bash
      run: poetry run pytest
      working-directory: "${{ inputs.moduleFolder }}"
